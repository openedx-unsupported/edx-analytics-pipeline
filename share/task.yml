---

- name: Configure luigi
  hosts: "{{ name }}"
  gather_facts: True
  sudo: True
  vars:
    write_luigi_config: "yes"
    common_debian_variants:
      - Ubuntu
      - Debian
    common_redhat_variants:
      - CentOS
      - Red Hat Enterprise Linux
      - Amazon
  roles:
    - role: luigi
      when: write_luigi_config|bool

- name: Run a task
  hosts: "{{ name }}"
  gather_facts: True

  vars:
    # - root_data_dir: /var/lib/analytics-tasks
    # - root_log_dir: /var/log/analytics-tasks
    - working_dir: "{{ root_data_dir }}/{{ uuid }}"
    - log_dir: "{{ root_log_dir }}/{{ uuid}}"
    - working_venv_dir: "{{ working_dir }}/venv"
    - virtualenv_python: "/usr/bin/python2.7"
    - virtualenv_extra_args: ''
    - git_servers:
        # Analytics repositories are currently hosted on github.
      - hostname: github.com
        public_key: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
    - local_log_dir: build/logs
    - common_debian_variants:
      - Ubuntu
      - Debian
    - common_redhat_variants:
      - CentOS
      - Red Hat Enterprise Linux
      - Amazon

    # - override_config: path/to/config.cfg (optionally adds a luigi config override)
    # - secure_config: path/to/config.cfg on the remote machine, could be from a checked out repo

    - pipeline_repo_dir_name: repo
    - repos:
      - url: https://github.com/edx/edx-analytics-pipeline.git
        branch: master
        dir_name: "{{ pipeline_repo_dir_name }}"
    - working_repo_dir: "{{ working_dir }}/{{ pipeline_repo_dir_name }}"

    - packages: []

  tasks:
    - name: find home directory
      shell: echo $HOME
      register: home_output

    - name: set the home variable
      set_fact: home="{{ home_output.stdout }}"

    - name: known_hosts file exists
      command: touch {{ home }}/.ssh/known_hosts creates={{ home }}/.ssh/known_hosts

    - name: git server in known_hosts file
      lineinfile: >
        dest={{ home }}/.ssh/known_hosts
        regexp=^{{item.hostname}}
        line="{{ item.hostname }} {{ item.public_key }}"
      with_items: git_servers

    - name: root directories created
      file: path={{ item }} state=directory owner=root group=root
      sudo: True
      with_items:
        - "{{ root_data_dir }}"
        - "{{ root_log_dir }}"

    - name: working directories created
      file: path={{ item }} state=directory mode=777 owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}
      sudo: True
      with_items:
        - "{{ working_dir }}"
        - "{{ working_venv_dir }}"

    - name: log directory created
      file: path={{ item }} state=directory mode=777 owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}
      sudo: True
      with_items:
        - "{{ log_dir }}"

    - name: make sure git is available on the Debian server
      command: apt-get install -q -y git
      sudo: True
      when: ansible_distribution in common_debian_variants

    - name: make sure git is available on the RHEL server
      yum: pkg=git state=present
      sudo: True
      when: ansible_distribution in common_redhat_variants

    - name: repositories checked out
      git: >
        repo={{ item.url }}
        dest={{ working_dir }}/{{ item.dir_name }}
        version=master
      with_items: repos

    - name: branches fetched
      command: git fetch --all chdir={{ working_dir }}/{{ item.dir_name }}
      with_items: repos

    - name: origin/HEAD updated
      command: git remote set-head origin --auto chdir={{ working_dir }}/{{ item.dir_name }}
      with_items: repos

    - name: branches checked out
      command: git checkout {{ item.branch }} chdir={{ working_dir }}/{{ item.dir_name }}
      with_items: repos

    - name: ensure system packages are installed
      command: make system-requirements chdir={{ working_repo_dir }}
      sudo: True

    - name: bootstrap pip on Debian
      command: apt-get install -q -y python-pip
      sudo: True
      when: ansible_distribution in common_debian_variants

    - name: bootstrap pip on RHEL
      command: yum install -q -y python-pip
      sudo: True
      when: ansible_distribution in common_redhat_variants

    # 2020-10-14: Virtualenv needed to be upgraded to get a newer version of pip installed
    # This version was the newest that would work with our version of setuptools.
    - name: virtualenv installed
      pip: name=virtualenv version=16.7.10
      sudo: True

    - name: check if virtualenv already created
      stat: path={{ working_venv_dir }}/bin/activate
      register: virtualenv_created

    - name: virtualenv created
      command: >
        virtualenv --python={{ virtualenv_python }} {{ virtualenv_extra_args }} {{ working_venv_dir }}
      when: not virtualenv_created.stat.exists

    - name: update pip
      command: >
        {{ working_venv_dir }}/bin/pip install -U pip

    - name: virtualenv initialized on Debian
      shell: >
        . {{ working_venv_dir }}/bin/activate && make install
        chdir={{ working_repo_dir }}
      when: ansible_distribution in common_debian_variants

    - name: virtualenv initialized on RHEL
      shell: >
        . {{ working_venv_dir }}/bin/activate && make install
        chdir={{ working_repo_dir }}
      when: ansible_distribution in common_redhat_variants

    - name: additional packages installed on Debian
      shell: >
        . {{ working_venv_dir }}/bin/activate && pip install {{ item }}
        chdir={{ working_repo_dir }}
      when: ansible_distribution in common_debian_variants
      with_items: packages

    - name: additional packages installed on RHEL
      shell: >
        . {{ working_venv_dir }}/bin/activate && pip install {{ item }}
        chdir={{ working_repo_dir }}
      when: ansible_distribution in common_redhat_variants
      with_items: packages

    - name: logging configured
      template: src=logging.cfg.j2 dest={{ working_repo_dir }}/logging.cfg

    - name: configuration override removed
      file: path={{ working_repo_dir }}/override.cfg state=absent

    - name: configuration override installed
      copy: src={{ override_config }} dest={{ working_repo_dir }}/override.cfg mode=644
      when: override_config is defined

    - name: boto configured
      copy: src=boto.cfg dest={{ working_repo_dir }}/.boto mode=644

    - name: show working directory
      debug: var=working_repo_dir
