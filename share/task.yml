---

- name: Configure luigi
  hosts: "{{ name }}"
  gather_facts: False
  sudo: True
  vars:
    write_luigi_config: "yes"
  roles:
    - role: luigi
      when: write_luigi_config|bool

- name: Run a task
  hosts: "{{ name }}"
  gather_facts: False

  vars:
    - repo: git@github.com:edx/edx-analytics-pipeline.git
    - branch: master
    # - root_data_dir: /var/lib/analytics-tasks
    # - root_log_dir: /var/log/analytics-tasks
    - working_dir: "{{ root_data_dir }}/{{ uuid }}"
    - log_dir: "{{ root_log_dir }}/{{ uuid}}"
    - working_repo_dir: "{{ working_dir }}/repo"
    - working_venv_dir: "{{ working_dir }}/venv"
    - virtualenv_python: "/usr/bin/python2.7"
    - git_servers:
        # Analytics repositories are currently hosted on github.
      - hostname: github.com
        public_key: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
    - local_log_dir: build/logs
    - install_env:
        # EMR runs a modified version of Debian 6 (squeeze)
        WHEEL_URL: http://edx-wheelhouse.s3-website-us-east-1.amazonaws.com/Debian/squeeze
        # EMR ships with python 2.7
        WHEEL_PYVER: 2.7

    # - override_config: path/to/config.cfg (optionally adds a luigi config override)

    # - secure_config_repo: git@github.com:some/repo.git
    - secure_config_branch: origin/release
    - secure_config_repo_dir: "{{ working_dir }}/config"
    # - secure_config: path/to/config.cfg which can be found in the secure config repo

  tasks:
    - name: find home directory
      shell: echo $HOME
      register: home_output

    - name: set the home variable
      set_fact: home="{{ home_output.stdout }}"

    - name: known_hosts file exists
      command: touch {{ home }}/.ssh/known_hosts creates={{ home }}/.ssh/known_hosts

    - name: git server in known_hosts file
      lineinfile: >
        dest={{ home }}/.ssh/known_hosts
        regexp=^{{item.hostname}}
        line="{{ item.hostname }} {{ item.public_key }}"
      with_items: git_servers

    - name: root directories created
      file: path={{ item }} state=directory owner=root group=root
      sudo: True
      with_items:
        - "{{ root_data_dir }}"
        - "{{ root_log_dir }}"

    - name: working directories created
      file: path={{ item }} state=directory mode=777 owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}
      sudo: True
      with_items:
        - "{{ working_dir }}"
        - "{{ working_repo_dir }}"
        - "{{ working_venv_dir }}"

    - name: log directory created
      file: path={{ item }} state=directory mode=777 owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}
      sudo: True
      with_items:
        - "{{ log_dir }}"

    - name: analytics tasks repository checked out
      git: repo={{ repo }} dest={{ working_repo_dir }} version=release

    - name: branch fetched
      command: git fetch --all chdir={{ working_repo_dir }}

    - name: branch checked out
      command: git checkout {{ branch }} chdir={{ working_repo_dir }}

    - name: ensure system packages are installed
      command: make system-requirements chdir={{ working_repo_dir }}
      sudo: True

    - name: bootstrap pip
      command: apt-get install -q -y python-pip
      sudo: True

    - name: virtualenv installed
      pip: name=virtualenv version=1.10.1
      sudo: True

    - name: virtualenv created
      command: >
        virtualenv --python={{ virtualenv_python }} {{ working_venv_dir }}

    - name: update pip
      command: >
        {{ working_venv_dir }}/bin/pip install -U pip

    - name: virtualenv initialized
      shell: >
        . {{ working_venv_dir }}/bin/activate && make install
        chdir={{ working_repo_dir }}
      environment: install_env

    - name: logging configured
      template: src=logging.cfg.j2 dest={{ working_repo_dir }}/logging.cfg

    - name: configuration override removed
      file: path={{ working_repo_dir }}/override.cfg state=absent

    - name: secure config repository checked out
      git: repo={{ secure_config_repo }} dest={{ secure_config_repo_dir }} version=release
      when: secure_config is defined

    - name: secure config branch fetched
      command: git fetch --all chdir={{ secure_config_repo_dir }}
      when: secure_config is defined

    - name: secure config branch checked out
      command: git checkout {{ secure_config_branch }} chdir={{ secure_config_repo_dir }}
      when: secure_config is defined

    - name: secure config installed
      command: cp {{ secure_config_repo_dir }}/{{ secure_config }} {{ working_repo_dir }}/override.cfg
      when: secure_config is defined

    - name: configuration override installed
      copy: src={{ override_config }} dest={{ working_repo_dir }}/override.cfg mode=644
      when: override_config is defined

    - name: boto configured
      copy: src=boto.cfg dest={{ working_repo_dir }}/.boto mode=644

    - name: show working directory
      debug: var=working_repo_dir
