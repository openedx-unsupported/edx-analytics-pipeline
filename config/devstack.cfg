[hive]
release = apache
version = 0.11
database = default
warehouse_path = hdfs://localhost:9000/edx-analytics-pipeline/warehouse/

[database-export]
database = reports
credentials = /edx/etc/edx-analytics-pipeline/output.json


[database-import]
database = edxapp
credentials = /edx/etc/edx-analytics-pipeline/input.json
destination = hdfs://localhost:9000/edx-analytics-pipeline/warehouse/

[otto-database-import]
database = ecommerce
credentials = /edx/etc/edx-analytics-pipeline/input.json

[map-reduce]
engine = hadoop
marker = hdfs://localhost:9000/edx-analytics-pipeline/marker/

[event-logs]
pattern = .*tracking.log.*
expand_interval = 2 days
source = hdfs://localhost:9000/data/

[event-export]
output_root = hdfs://localhost:9000/edx-analytics-pipeline/event-export/output/
environment = simple
config = hdfs://localhost:9000/edx-analytics-pipeline/event_export/config.yaml
gpg_key_dir = hdfs://localhost:9000/edx-analytics-pipeline/event_export/gpg-keys/
gpg_master_key = master@key.org
required_path_text = FakeServerGroup

[event-export-course]
output_root = hdfs://localhost:9000/edx-analytics-pipeline/event-export-by-course/output/

[obfuscation]
output_root = hdfs://localhost:9000/edx-analytics-pipeline/obfuscation/output/
explicit_event_whitelist = explicit_events.tsv
xblock_obfuscation_config = xblock_obfuscation_config.yml

[id-codec]
seed_value = 42

[manifest]
threshold = 500
input_format = org.edx.hadoop.input.ManifestTextInputFormat
lib_jar = hdfs://localhost:9000/edx-analytics-pipeline/packages/edx-analytics-hadoop-util.jar
path = hdfs://localhost:9000/edx-analytics-pipeline/manifest/

[user-activity]
output_root = hdfs://localhost:9000/edx-analytics-pipeline/activity/

[enrollments]
interval_start = 2013-11-01

[enrollment-reports]
src = hdfs://localhost:9000/data/
destination = hdfs://localhost:9000/edx-analytics-pipeline/enrollment_reports/output/
offsets = hdfs://localhost:9000/edx-analytics-pipeline/enrollment_reports/offsets.tsv
blacklist = hdfs://localhost:9000/edx-analytics-pipeline/enrollment_reports/course_blacklist.tsv
history = hdfs://localhost:9000/edx-analytics-pipeline/enrollment_reports/enrollment_history.tsv

[financial-reports]
shoppingcart-partners = {"DEFAULT": "edx"}

[geolocation]
geolocation_data = hdfs://localhost:9000/edx-analytics-pipeline/geo.dat

[calendar]
interval = 2012-01-01-2020-01-01

[videos]
dropoff_threshold = 0.05

[elasticsearch]
# Point to the vagrant host's port 9201 where we assume elasticsearch is running
host = http://172.17.0.1:9201/

[module-engagement]
alias = roster
number_of_shards = 5

[ccx]
enabled = false

[run-vertica-sql-script]
schema = testing
read_timeout = 5

[problem-response]
report_fields = [
    "username",
    "problem_id",
    "answer_id",
    "location",
    "question",
    "score",
    "max_score",
    "correct",
    "answer",
    "total_attempts",
    "first_attempt_date",
    "last_attempt_date"]
report_output_root = /edx/src/problem-response-reports/

[edx-rest-api]
# Create using:
# ./manage.py lms --settings=devstack create_oauth2_client  \
#   http://localhost:9999  # URL doesn't matter \
#   http://localhost:9999/complete/edx-oidc/  \
#   confidential \
#   --client_name "Analytics Pipeline" \
#   --client_id oauth_id \
#   --client_secret oauth_secret \
#   --trusted
client_id = oauth_id
client_secret = oauth_secret
auth_url = http://localhost:8000/oauth2/access_token/

[course-list]
api_root_url = http://localhost:8000/api/courses/v1/courses/

[course-blocks]
api_root_url = http://localhost:8000/api/courses/v1/blocks/
